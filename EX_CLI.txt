Packmaster CLI Rules syntax examples
--------------------------------------------------------------------------------------------------------------------
Show Rules:
cc dump-flows br0

Add rule:
cc add-flow br0 in_port=1,priority=32768,actions=output:2
																				 actions=output:2,3,4    #output to multiple ports can also be abbreviated as actions="2,3,4"
																				 actions=drop            #drop all traffic
																				 actions=group:100       #output to group 100
																				 actions="set_field:4196->vlan_vid,output:2"    #modify VLAN ID (in the CLI there is an offset of 4096 for VLAN ID; i.e. set_field:4196 = VLAN ID 100)
																				 actions="push_vlan:0x8100,set_field:4196->vlan_vid,output:2"    #push VLAN
																				 actions="strip_vlan,output:2"  strip VLAN ID
																				 actions="set_field:10:AB:11:CD:12:EF->eth_src,2"    #modify MAC source
																				 actions="set_field:10:AB:11:CD:12:EF->eth_dst,2"    #modify MAC destination
																				 actions="pop_l2,push_mpls:0x8847,set_field:16->mpls_label,push_l2,set_field:10:AB:11:CD:12:EF->eth_dst,output:2"   #Push MPLS
																				 actions="pop_l2,pop_mpls:0x8847,push_mpls:0x8847,set_field:16->mpls_label,push_l2,set_field:10:AB:11:CD:12:EF->eth_dst,output:2"   #Set MPLS Label
																				 actions="pop_l2,pop_mpls:0,push_l2,set_field:10:AB:11:CD:12:EF->eth_dst,output:2"   #Pop MPLS

Filter by Protocol:
 cc add-flow br0 in_port=1,priority=32768,tcp,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,udp,actions=output:2
																					icmp
																					arp
																					rarp
																					ip
																					sctp

IP with protocol number:
 cc add-flow br0 in_port=1,priority=32768,ip,nw_proto=50,actions="output:2"

with source and destination ports:
 cc add-flow br0 in_port=1,priority=32768,tcp,tp_src=443,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,tcp,tp_dst=443,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,udp,tp_src=80,tp_dst=80,actions=output:2

with MAC source and destination:
 cc add-flow br0 in_port=1,priority=32768,dl_src=10:AB:11:CD:12:EF,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,dl_dst=10:AB:11:CD:12:EF,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,dl_src=10:AB:11:CD:12:EF,dl_dst=10:AB:11:CD:12:EF,actions=output:2

with source and destination IP:
 cc add-flow br0 in_port=1,priority=32768,ip,nw_src=192.168.0.1,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,ip,nw_dst=192.168.0.1,actions=output:2
 cc add-flow br0 in_port=1,priority=32768,ip,nw_src=192.168.0.1,nw_dst=192.168.0.1,actions=output:2

with VLAN ID:
 cc add-flow br0 in_port=1,priority=32768,dl_vlan=1,actions=output:2

matching only non-VLAN tagged traffic:
 cc add-flow br0 in_port=1,priority=32768,vlan_tci=0x0000/0x1000,actions="2"

ICMP with ICMP type and ICMP code (3,3):
 cc add-flow br0 in_port=1,priority=32758,icmp,icmp_type=3,icmp_code=3,actions="output:2"

Filtering on TCP Flags:
 In GUI:
 Set Add Rule > Protocol to "IP/TCP"
 Use "Extra Custom Match" for filtering fields
 tcp_flags=+fin     Use '+' to include a flag and '-' to exclude a flag.  Unspecified tags are wildcards.
					 +syn
					 +rst
					 +psh
					 +ack
					 +urg
					 +ece
					 +cwr
					 +ns

In CLI:
 cc add-flow br0 in_port=1,tcp,tcp_flags=+syn-ack,actions=output:2

IPV6 Filtering:

 Set DB Mode to IPV6

 In GUI:
 Set Add Rule > Protocol to "Custom"
 Set Ether Type to "0x86dd"
 Use "Extra Custom Match" for filtering fields
In CLI:
 cc add-flow br0 ipv6,in_port=1,ipv6_src=::1,ipv6_dst=::1,actions=2
 cc add-flow br0 tcp6,in_port=1,tcp_src=80,tcp_dst=80,actions=2 OR cc add-flow br0 tcp6,in_port=1,tp_src=80,tp_dst=80,actions=2
 cc add-flow br0 udp6,in_port=1,udp_src=80,udp_dst=80,actions=2 OR cc add-flow br0 udp6,in_port=1,tp_src=80,tp_dst=80,actions=2

 with IP and Port:
 cc add-flow br0 ipv6,in_port=1,ipv6_src=::1,ipv6_dst=::1,tp_src=80,tp_dst=80,actions=2

Delete rule:   (the behavior of deleting rules can be unexpected.  deleting a rule that matches destination
port 80 will delete ALL rules that could potentially go to port 80 not rules that specifically go to port 80)

 cc del-flows br0 in_port=1     cc del-flows br0 <matching criteria>  delete all matching flows

 cc del-flows br0 tcp
 cc del-flows br0 tp_dst=80
 cc del-flows br0 dl_src=10:AB:11:CD:12:EF
 cc del-flows br0 nw_src=192.168.0.1
 etc.

Delete ALL rules:

 cc del-flows br0

Timeout of rules:

 cc add-flow br0 in_port=1,hard_timeout=5,priority=32768,actions=output:2    timeout number is seconds
 cc add-flow br0 in_port=1,idle_timeout=5,priority=32768,actions=output:2

MPLS:  (EX2 does not support pop_all_mpls command.  Must specify each MPLS tag to pop)
	ovs-ofctl add-flow br0 in_port=1,mpls,actions=output:2 -O openflow13
	-MPLS labeled packets pass through, non-MPLS tagged traffic does not-


	ovs-ofctl add-flow br0 in_port=1,mpls,actions="pop_l2,pop_all_mpls,push_l2,set_field:00:00:00:00:00:AA->eth_dst,output:2" -O openflow13
	-drop MPLS label(s) of ipv4 and ipv6, unlabeled traffic not passing â€“ requires a 2nd rule with lower priority-


Filtering on MPLS labeled traffic:
 Filtering on MPLS labeled packets does not work - requires strip of MPLS label and a Hardware loop

	Multiple Outputs with MPLS pop command
	--------------------------------------
	ovs-ofctl add-flow br0 in_port=1,mpls,actions="pop_l2,pop_all_mpls,push_l2,set_field:00:00:00:00:00:AA->eth_dst,output:2,pop_l2,pop_all_mpls,push_l2,set_field:00:00:00:00:00:BB->eth_dst,output:3" -O openflow13


	MPLS pop
	--------
	ovs-ofctl add-flow br0 "in_port=1,dl_type=0x0800,actions=pop_l2,push_mpls:0x8847,set_field:16->mpls_label,push_l2,set_field:00:1e:08:00:02:01->eth_dst,output:2" -O openflow13
	-add MPLS label 16-


	MPLS change label
	-----------------
	ovs-ofctl add-flow br0 "dl_type=0x8847,mpls_label=300,actions=pop_l2,pop_mpls:0x8847,push_mpls:0x8847,set_field:400-mpls_label,push_l2,set_field:00:1e:08:00:03:01->eth_dst,output:2" O openflow13
	-changes MPLS label from 300 to 400-

GRE: (EX2 uses different syntax, see lower.  Ex2 will automatically untunnel any GRE traffic recieved)

	CLI Config: (G4 units)
	Encap PM
	--------
	Switch# config

	Switch# configure terminal
  Switch(config)# openflow tunnel local_vtep_ip 10.0.0.1
	end
	exit
	cv add-port br0 l2gre1 -- set interface l2gre1 type=l2gre options:remote_ip=10.0.0.2 options:bind_port=eth-0-1 options:nexthop_mac=00:1e:08:0b:36:c9


	Decap PM
	--------
	Switch# config
	Switch# configure terminal
	Switch(config)# openflow tunnel local_vtep_ip 10.0.0.2
	end
	exit
	cv add-port br0 l2gre1 -- set interface l2gre1 type=l2gre options:remote_ip=10.0.0.1 options:bind_port=eth-0-1 options:nexthop_mac=70:b3:d5:01:a7:c8

	CLI Config: (EX2)

	cv add-port br0 gre1 -- set interface gre1 type=gre options:remote_ip=10.0.0.2 options:local_ip=10.0.0.1 options:bind_port=eth-0-4 options:nexthop_mac=00:00:00:00:00:2

 Flows:
	Encap (Encap PM)
	----------------
	cc add-flow br0 in_port=2,actions=output:201

	Decap (Decap PM)
	----------------
	cc add-flow br0 in_port=201,actions=output:2

Show Groups:
cc dump-groups br0

Add Group:

  All (Traffic Replication):
  cc add-group br0 group_id=100,type=all,bucket=output:5,bucket=output:6    #Add output actions as above

  Select (Load Balancing):
  cc add-group br0 group_id=100,type=select,bucket=output:5,bucket=output:6,bucket=output:7

  Fast Failover:
  cc add-group br0 group_id=100,type=ff,bucket=watch_port:7,output:7,bucket=watch_port:8,output:7

Delete All Groups:
cc del-groups br0

Delete Group:
cc del-groups br0 group_id=100   #Delete only group 100
